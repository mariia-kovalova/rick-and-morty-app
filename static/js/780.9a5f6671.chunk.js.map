{"version":3,"file":"static/js/780.9a5f6671.chunk.js","mappings":"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","sources":["redux/episode/selectors.js","hooks/useOneEpisode.js","modules/Episodes/components/Episode/Episode.style.jsx","modules/Episodes/components/Episode/Episode.jsx","modules/Episodes/components/SearchEpisodes/SearchEpisodes.styled.jsx","modules/Episodes/components/SearchEpisodes/schema.js","modules/Episodes/components/SearchEpisodes/inputs.js","modules/Episodes/components/SearchEpisodes/SearchEpisodes.jsx","modules/Episodes/components/RandomEpisode/RandomEpisode.styled.jsx","modules/Episodes/components/RandomEpisode/RandomEpisode.jsx","modules/Episodes/Episodes.jsx","pages/EpisodesPage/EpisodesPage.jsx","shared/components/RickForRandomizer/RickForRandomizer.styled.jsx","shared/components/RickForRandomizer/RickForRandomizer.jsx","shared/utils/getRandomId.js"],"sourcesContent":["export const selectEpisode = state => state.episode.item;\nexport const selectEpisodeIsLoading = state => state.episode.isLoading;\nexport const selectEpisodeError = state => state.episode.error;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { useSelector } from 'react-redux';\nimport {\n  selectEpisode,\n  selectEpisodeError,\n  selectEpisodeIsLoading,\n} from 'redux/episode/selectors';\nimport { selectFavEpisodesIds } from 'redux/library/selectors';\nimport { addIsFavouriteToItem } from 'shared/utils/addIsFavourite';\n\nconst selectEpisodeWithIsFav = createSelector(\n  [selectEpisode, selectFavEpisodesIds],\n  addIsFavouriteToItem\n);\n\nexport const useOneEpisode = () => {\n  const episode = useSelector(selectEpisodeWithIsFav);\n  const isLoading = useSelector(selectEpisodeIsLoading);\n  const error = useSelector(selectEpisodeError);\n\n  return {\n    episode,\n    isLoading,\n    error,\n  };\n};\n","import { keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { desktop, tablet } from 'shared/constants/deviceSizes';\nimport { Number } from 'shared/styles/components/Number.styled';\nimport { getHeartColor } from 'shared/utils/getHeartColor';\n\nconst shine = keyframes`\n   0% {\n    background-position: -5px;\n  }\n  40%, 100% {\n    background-position: 208px;\n  }\n`;\n\nexport const Wrap = styled.div`\n  position: relative;\n  z-index: 1;\n\n  transition: transform 250ms ${({ theme }) => theme.cubic};\n\n  @media screen and (min-width: ${tablet}) {\n    height: 253px;\n  }\n\n  & ul {\n    bottom: -175%;\n    left: 0;\n\n    @media screen and (min-width: ${tablet}) {\n      bottom: -8%;\n      left: -30%;\n    }\n  }\n\n  a:hover &,\n  a:focus & {\n    transform: scale(1.1);\n  }\n\n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n\n    width: 100%;\n    height: 40px;\n\n    background-color: ${({ theme }) => theme.bgEpisodesTransparent};\n\n    @media screen and (min-width: ${tablet}) {\n      left: -30%;\n      width: 585px;\n      height: 55px;\n    }\n  }\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    z-index: -1;\n\n    width: 237px;\n    height: 133px;\n\n    background-color: rgba(81, 107, 107, 0.801);\n    border: 1px solid ${({ theme }) => theme.paginationAccent};\n    border-radius: 4px;\n    background: linear-gradient(\n        90deg,\n        rgba(255, 255, 255, 0) 20%,\n        rgba(255, 255, 255, 0.5) 50%,\n        rgba(255, 255, 255, 0) 70%\n      )\n      rgba(255, 255, 255, 0.384);\n    background-size: 200% 100%;\n    background-position-x: 180%;\n    animation: ${shine} 2s ${({ theme }) => theme.cubic} infinite;\n\n    @media screen and (min-width: ${tablet}) {\n      width: 450px;\n      height: 253px;\n    }\n  }\n`;\n\nexport const LoaderWrap = styled.div`\n  position: absolute;\n\n  top: 53px;\n  left: 40px;\n\n  @media screen and (min-width: ${tablet}) {\n    top: 75px;\n    left: 258px;\n  }\n\n  @media screen and (min-width: ${desktop}) {\n    top: 0;\n    left: 123px;\n  }\n`;\n\nexport const Img = styled.img`\n  border-radius: 4px;\n`;\n\nexport const StyledNumber = styled(Number)`\n  position: absolute;\n  top: 5px;\n  left: 10px;\n\n  font-size: 20px;\n  color: ${({ theme }) => theme.textPrimary};\n  transition: color 250ms ${({ theme }) => theme.cubic};\n\n  @media screen and (min-width: ${tablet}) {\n    top: 5px;\n    left: -126px;\n    font-size: 30px;\n  }\n\n  a:hover & {\n    color: ${({ theme }) => theme.characterCardTextAccent};\n  }\n`;\n\nexport const HeartWrap = styled.div`\n  position: absolute;\n  top: 0;\n  right: 3%;\n  z-index: 1;\n\n  @media screen and (min-width: ${tablet}) {\n    top: 3%;\n    right: 3%;\n  }\n\n  width: 30px;\n  height: 30px;\n\n  & svg {\n    stroke: ${getHeartColor};\n    fill: ${getHeartColor};\n  }\n`;\n","import { useOneEpisode } from 'hooks/useOneEpisode';\nimport { EpisodeCardInfo } from '../EpisodCardInfo/EpisodeCardInfo';\nimport {\n  HeartWrap,\n  Img,\n  LoaderWrap,\n  StyledNumber,\n  Wrap,\n} from './Episode.style';\nimport { Heart } from 'shared/components/Heart';\nimport { favepisodes } from 'shared/constants/libaryListName';\nimport { CardLoader } from 'shared/components/CardLoader';\n\nexport const Episode = ({ image }) => {\n  const { episode, isLoading } = useOneEpisode();\n  const { id, isFavourite, name } = episode;\n\n  return (\n    <>\n      {isLoading ? (\n        <LoaderWrap>\n          <CardLoader />\n        </LoaderWrap>\n      ) : (\n        <Wrap>\n          <StyledNumber>\n            <span>Episode </span>#{id}\n          </StyledNumber>\n          <HeartWrap isFavourite={isFavourite}>\n            <Heart\n              id={id}\n              isFavourite={isFavourite}\n              libraryListName={favepisodes}\n            />\n          </HeartWrap>\n          <EpisodeCardInfo episode={episode} />\n          <Img src={image} alt={name} width=\"450\" height=\"200\" />\n        </Wrap>\n      )}\n    </>\n  );\n};\n","import styled from '@emotion/styled/macro';\nimport { tablet } from 'shared/constants/deviceSizes';\n\nexport const Wrap = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  gap: 20px;\n\n  margin: 0 auto;\n`;\n\nexport const Selected = styled.select`\n  width: 210px;\n\n  outline: none;\n  border: 2px solid ${({ theme }) => theme.paginationAccent};\n  border-radius: 8px;\n  background-color: #fff;\n  color: #212121;\n  padding: 14px 10px 14px 10px;\n  text-align: center;\n\n  @media screen and (min-width: ${tablet}) {\n    width: 260px;\n  }\n`;\n\nexport const Option = styled.option`\n  font-style: normal;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 18px;\n  color: grey;\n`;\n","import { message, regex } from 'shared/constants/serchInput';\nimport * as Yup from 'yup';\n\nexport const schema = Yup.object({\n  name: Yup.string().matches(regex, {\n    message: message,\n    excludeEmptyString: true,\n  }),\n});\n","import { nanoid } from '@reduxjs/toolkit';\n\nexport const searchInput = {\n  id: nanoid(),\n  inputName: 'name',\n};\n\nexport const selectInput = {\n  id: nanoid(),\n  inputName: 'episode',\n  options: [\n    { option: 'All seasons', value: '' },\n    { option: 'Season 1', value: 'S01' },\n    { option: 'Season 2', value: 'S02' },\n    { option: 'Season 3', value: 'S03' },\n    { option: 'Season 4', value: 'S04' },\n    { option: 'Season 5', value: 'S05' },\n  ],\n};\n\nexport const inputs = [searchInput.inputName, selectInput.inputName];\n","import { Wrap, Selected, Option } from './SearchEpisodes.styled';\nimport { useSearchParams } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { schema } from './schema';\nimport debounce from 'lodash.debounce';\nimport { SearchInput } from 'shared/components/SearchInput';\nimport { getSearchValues } from 'shared/utils/getSearchValues';\nimport { inputs, searchInput, selectInput } from './inputs';\nimport { getCleanValues } from 'shared/utils/getCleanValues';\n\nconst DELAY = 500;\n\nexport const SearchEpisodes = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const {\n    register,\n    formState: { errors },\n  } = useForm({\n    defaultValues: getSearchValues(inputs, searchParams),\n    resolver: yupResolver(schema),\n    mode: 'onChange',\n  });\n\n  const handleSearch = debounce(async ({ target }) => {\n    if (target.value.trim() === '') {\n      searchParams.delete(target.name);\n      setSearchParams(searchParams);\n      return;\n    }\n    if (errors[target.name]) return;\n    setSearchParams({\n      ...getCleanValues(getSearchValues(inputs, searchParams)),\n      [target.name]: target.value,\n    });\n  }, DELAY);\n\n  return (\n    <Wrap>\n      <Selected\n        {...register(selectInput.inputName)}\n        onChange={handleSearch}\n        defaultValue=\"\"\n      >\n        {selectInput.options.map(({ option, value }) => (\n          <Option key={option} value={value}>\n            {option}\n          </Option>\n        ))}\n      </Selected>\n      <SearchInput\n        id={searchInput.id}\n        inputName={searchInput.inputName}\n        register={register}\n        errors={errors}\n        onChange={handleSearch}\n        placeholder=\"Filter by name...\"\n      />\n    </Wrap>\n  );\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\nimport { desktop, tablet } from 'shared/constants/deviceSizes';\nimport {\n  CardDecoration,\n  CardWrap,\n} from 'shared/styles/components/CardDecoration.styled';\n\nexport const RandomEpisodeDecor = styled(CardDecoration)`\n  margin: 0 auto;\n\n  @media screen and (min-width: ${desktop}) {\n    width: 1100px;\n  }\n\n  &::before {\n    z-index: -1;\n  }\n`;\n\nexport const EpisodeWrap = styled(CardWrap)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 196px;\n\n  height: 458px;\n\n  @media screen and (min-width: ${tablet}) {\n    align-items: end;\n    gap: 30px;\n\n    height: 440px;\n  }\n\n  @media screen and (min-width: ${desktop}) {\n    flex-direction: row;\n    justify-content: end;\n    align-items: center;\n    gap: 100px;\n\n    height: 380px;\n  }\n\n  &::before {\n    top: -18px;\n    left: -18.6px;\n  }\n\n  &::after {\n    bottom: -18px;\n    right: -18.6px;\n  }\n`;\n\nexport const StyledLink = styled(Link)`\n  display: block;\n  height: 100%;\n  color: inherit;\n`;\n\nexport const Randomizer = styled.div`\n  align-self: center;\n\n  @media screen and (min-width: ${desktop}) {\n    width: 300px;\n    display: flex;\n    flex-direction: column;\n    gap: 30px;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getEpisodeById } from 'redux/episode/thunks';\nimport { getRandomIndex } from 'shared/utils/getRandomIndex';\nimport { RandomButton } from 'shared/components/RandomButton';\nimport { images } from 'modules/Episodes/api.img/api.img';\nimport { useOneEpisode } from 'hooks/useOneEpisode';\nimport { useLocation } from 'react-router';\nimport { useEpisodes } from 'hooks/useEpisodes';\nimport { getRandomId } from 'shared/utils/getRandomId';\nimport { Episode } from '../Episode/Episode';\nimport { episodes } from 'shared/constants/routes';\nimport { RickForRandomizer } from 'shared/components/RickForRandomizer';\nimport { desktop } from 'shared/constants/deviceSizes';\nimport {\n  EpisodeWrap,\n  RandomEpisodeDecor,\n  Randomizer,\n  StyledLink,\n} from './RandomEpisode.styled';\nimport { addToLibrary } from 'redux/library/slice';\nimport { randomepisodes } from 'shared/constants/libaryListName';\n\nconst FIRST_EPISODE_ID = 1;\n\nexport const RandomEpisode = () => {\n  const location = useLocation();\n  const { info } = useEpisodes();\n  const { episode, isLoading, error } = useOneEpisode();\n  const [id, setId] = useState(episode?.id ?? FIRST_EPISODE_ID);\n  const [image, setImage] = useState(images[0]);\n  const dispatchFunc = useDispatch();\n\n  useEffect(() => {\n    dispatchFunc(getEpisodeById(id));\n    dispatchFunc(addToLibrary({ libraryListName: randomepisodes, id }));\n  }, [dispatchFunc, id]);\n\n  const handleRandomEpisode = () => {\n    const randomId = getRandomId({ max: info.count });\n    setId(randomId);\n    const randomIndex = getRandomIndex(images.length);\n    setImage(images[randomIndex]);\n  };\n\n  const shouldShowEpisode = episode !== null && !error;\n\n  return (\n    <RandomEpisodeDecor>\n      <EpisodeWrap>\n        <StyledLink to={`/${episodes}/${id}`} state={{ from: location }}>\n          {shouldShowEpisode && <Episode image={image} />}\n        </StyledLink>\n        <Randomizer>\n          <RickForRandomizer showOnDeviceWidth={desktop} />\n          <RandomButton onClick={handleRandomEpisode} isLoading={isLoading}>\n            Random Episode\n          </RandomButton>\n        </Randomizer>\n      </EpisodeWrap>\n    </RandomEpisodeDecor>\n  );\n};\n","import { Container } from 'shared/styles/components/Container.styled';\nimport { Section } from 'shared/styles/components/Section.styled';\nimport { SearchEpisodes } from './components/SearchEpisodes/SearchEpisodes';\nimport { EpisodeCardList } from './components/EpisodeCardList/EpisodeCardList';\nimport { RandomEpisode } from './components/RandomEpisode/RandomEpisode';\nimport { StyledH1 } from './Episodes.styled';\n\nexport const Episodes = () => {\n  return (\n    <>\n      <Section>\n        <Container>\n          <StyledH1>Episodes</StyledH1>\n          <RandomEpisode />\n        </Container>\n      </Section>\n      <Section>\n        <Container>\n          <SearchEpisodes />\n        </Container>\n      </Section>\n      <Section>\n        <Container>\n          <EpisodeCardList />\n        </Container>\n      </Section>\n    </>\n  );\n};\n","import { Helmet } from 'react-helmet-async';\nimport { Episodes } from 'modules/Episodes';\n\nconst EpisodesPage = () => {\n  return (\n    <>\n      <Helmet>\n        <title>Episodes</title>\n      </Helmet>\n      <Episodes />\n    </>\n  );\n};\n\nexport default EpisodesPage;\n","import styled from '@emotion/styled';\n\nconst getDeviceWidth = ({ showOnDeviceWidth }) => showOnDeviceWidth;\n\nexport const Wrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 40px;\n\n  @media screen and (max-width: ${getDeviceWidth}) {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    margin: -1px;\n    border: 0;\n    padding: 0;\n\n    white-space: nowrap;\n    clip-path: inset(100%);\n    clip: rect(0 0 0 0);\n    overflow: hidden;\n  }\n`;\n\nexport const SvgRick = styled.svg``;\n\nexport const RicksText = styled.p`\n  font-size: 24px;\n  text-align: center;\n`;\n","import sprite from 'shared/icons/sprite.svg';\nimport { useLocation } from 'react-router';\nimport { characters, episodes, locations } from 'shared/constants/routes';\nimport { RicksText, SvgRick, Wrap } from './RickForRandomizer.styled';\n\nexport const RickForRandomizer = ({ showOnDeviceWidth }) => {\n  const location = useLocation();\n\n  const getText = location => {\n    switch (location.pathname) {\n      case `/${characters}`:\n        return 'character';\n      case `/${episodes}`:\n        return 'episode';\n      case `/${locations}`:\n        return 'location';\n      default:\n        return 'data';\n    }\n  };\n\n  return (\n    <Wrap showOnDeviceWidth={showOnDeviceWidth}>\n      <SvgRick width=\"100\" height=\"100\">\n        <use href={`${sprite}#icons8-rick-sanchez`} />\n      </SvgRick>\n      <RicksText>\n        Yeah, just get a random {getText(location)} ...whatever\n      </RicksText>\n    </Wrap>\n  );\n};\n","export const getRandomId = ({ max }) => Math.floor(Math.random() * max) + 1;\n"],"names":["selectEpisodeIsLoading","state","episode","isLoading","selectEpisodeError","error","selectEpisodeWithIsFav","createSelector","item","selectFavEpisodesIds","addIsFavouriteToItem","useOneEpisode","useSelector","shine","keyframes","Wrap","styled","theme","cubic","tablet","bgEpisodesTransparent","paginationAccent","LoaderWrap","desktop","Img","StyledNumber","Number","textPrimary","characterCardTextAccent","HeartWrap","getHeartColor","Episode","image","id","isFavourite","name","CardLoader","Heart","libraryListName","favepisodes","EpisodeCardInfo","src","alt","width","height","Selected","Option","schema","Yup","matches","regex","message","excludeEmptyString","searchInput","nanoid","inputName","selectInput","options","option","value","inputs","SearchEpisodes","useSearchParams","searchParams","setSearchParams","useForm","defaultValues","getSearchValues","resolver","yupResolver","mode","register","errors","formState","handleSearch","debounce","target","trim","delete","getCleanValues","onChange","defaultValue","map","SearchInput","placeholder","RandomEpisodeDecor","CardDecoration","EpisodeWrap","CardWrap","StyledLink","Link","Randomizer","RandomEpisode","location","useLocation","info","useEpisodes","useState","setId","images","setImage","dispatchFunc","useDispatch","useEffect","getEpisodeById","addToLibrary","randomepisodes","shouldShowEpisode","to","episodes","from","RickForRandomizer","showOnDeviceWidth","RandomButton","onClick","randomId","getRandomId","max","count","randomIndex","getRandomIndex","Episodes","EpisodeCardList","SvgRick","RicksText","href","sprite","pathname","characters","locations","getText","Math","floor","random"],"sourceRoot":""}