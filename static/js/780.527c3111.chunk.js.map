{"version":3,"file":"static/js/780.527c3111.chunk.js","mappings":"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","sources":["redux/episode/selectors.js","hooks/useOneEpisode.js","modules/Episodes/components/Episode/Episode.style.jsx","modules/Episodes/components/Episode/Episode.jsx","modules/Episodes/components/EpisodeCardList/EpisodeCardList.styled.jsx","modules/Episodes/components/EpisodeCardList/EpisodeCardList.jsx","modules/Episodes/components/RandomEpisode/RandomEpisode.styled.jsx","modules/Episodes/components/RandomEpisode/RandomEpisode.jsx","modules/Episodes/components/SearchEpisodes/SearchEpisodes.styled.jsx","modules/Episodes/components/SearchEpisodes/schema.js","modules/Episodes/components/SearchEpisodes/inputs.js","modules/Episodes/components/SearchEpisodes/SearchEpisodes.jsx","modules/Episodes/Episodes.jsx","pages/EpisodesPage/EpisodesPage.jsx","shared/components/RickForRandomizer/RickForRandomizer.styled.jsx","shared/components/RickForRandomizer/RickForRandomizer.jsx","shared/utils/getRandomId.js"],"sourcesContent":["export const selectEpisode = state => state.episode.item;\nexport const selectEpisodeIsLoading = state => state.episode.isLoading;\nexport const selectEpisodeError = state => state.episode.error;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { useSelector } from 'react-redux';\nimport {\n  selectEpisode,\n  selectEpisodeError,\n  selectEpisodeIsLoading,\n} from 'redux/episode/selectors';\nimport { selectFavEpisodesIds } from 'redux/library/selectors';\nimport { addIsFavouriteToItem } from 'shared/utils/addIsFavourite';\n\nconst selectEpisodeWithIsFav = createSelector(\n  [selectEpisode, selectFavEpisodesIds],\n  addIsFavouriteToItem\n);\n\nexport const useOneEpisode = () => {\n  const episode = useSelector(selectEpisodeWithIsFav);\n  const isLoading = useSelector(selectEpisodeIsLoading);\n  const error = useSelector(selectEpisodeError);\n\n  return {\n    episode,\n    isLoading,\n    error,\n  };\n};\n","import { keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { desktop, tablet } from 'shared/constants/deviceSizes';\nimport { Number } from 'shared/styles/components/Number.styled';\nimport { getHeartColor } from 'shared/utils/getHeartColor';\n\nconst shine = keyframes`\n   0% {\n    background-position: -5px;\n  }\n  40%, 100% {\n    background-position: 208px;\n  }\n`;\n\nexport const Wrap = styled.div`\n  position: relative;\n  z-index: 1;\n\n  transition: transform 250ms ${({ theme }) => theme.cubic};\n\n  a:hover &,\n  a:focus & {\n    transform: scale(1.1);\n  }\n\n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n\n    width: 100%;\n    height: 40px;\n\n    background-color: ${({ theme }) => theme.bgEpisodesTransparent};\n\n    @media screen and (min-width: ${tablet}) {\n      left: -30%;\n      width: 585px;\n      height: 55px;\n    }\n  }\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    z-index: -1;\n\n    width: 237px;\n    height: 133px;\n\n    background-color: rgba(81, 107, 107, 0.801);\n    border: 1px solid ${({ theme }) => theme.crossThemeAccent};\n    border-radius: 4px;\n    background: linear-gradient(\n        90deg,\n        rgba(255, 255, 255, 0) 20%,\n        rgba(255, 255, 255, 0.5) 50%,\n        rgba(255, 255, 255, 0) 70%\n      )\n      rgba(255, 255, 255, 0.384);\n    background-size: 200% 100%;\n    background-position-x: 180%;\n    animation: ${shine} 2s ${({ theme }) => theme.cubic} infinite;\n\n    @media screen and (min-width: ${tablet}) {\n      width: 450px;\n      height: 253px;\n    }\n  }\n`;\n\nexport const LoaderWrap = styled.div`\n  position: absolute;\n\n  top: 53px;\n  left: 40px;\n\n  @media screen and (min-width: ${tablet}) {\n    top: 75px;\n    left: 258px;\n  }\n\n  @media screen and (min-width: ${desktop}) {\n    top: 0;\n    left: 123px;\n  }\n`;\n\nexport const Img = styled.img`\n  border-radius: 4px;\n`;\n\nexport const StyledNumber = styled(Number)`\n  position: absolute;\n  top: 5px;\n  left: 10px;\n\n  font-size: 20px;\n  color: ${({ theme }) => theme.textPrimary};\n  transition: color 250ms ${({ theme }) => theme.cubic};\n\n  @media screen and (min-width: ${tablet}) {\n    top: 5px;\n    left: -126px;\n    font-size: 30px;\n  }\n\n  a:hover & {\n    color: ${({ theme }) => theme.characterCardTextAccent};\n  }\n`;\n\nexport const HeartWrap = styled.div`\n  position: absolute;\n  top: 0;\n  right: 3%;\n  z-index: 1;\n\n  @media screen and (min-width: ${tablet}) {\n    top: 3%;\n    right: 3%;\n  }\n\n  width: 30px;\n  height: 30px;\n\n  & svg {\n    stroke: ${getHeartColor};\n    fill: ${getHeartColor};\n  }\n`;\n","import { useOneEpisode } from 'hooks/useOneEpisode';\nimport { EpisodeCardInfo } from '../EpisodCardInfo/EpisodeCardInfo';\nimport {\n  HeartWrap,\n  Img,\n  LoaderWrap,\n  StyledNumber,\n  Wrap,\n} from './Episode.style';\nimport { Heart } from 'shared/components/Heart';\nimport { favepisodes } from 'shared/constants/libaryListName';\nimport { CardLoader } from 'shared/components/CardLoader';\n\nexport const Episode = ({ image }) => {\n  const { episode, isLoading } = useOneEpisode();\n  const { id, isFavourite, name } = episode;\n\n  return (\n    <>\n      {isLoading ? (\n        <LoaderWrap>\n          <CardLoader />\n        </LoaderWrap>\n      ) : (\n        <Wrap>\n          <StyledNumber>\n            <span>Episode </span>#{id}\n          </StyledNumber>\n          <HeartWrap isFavourite={isFavourite}>\n            <Heart\n              id={id}\n              isFavourite={isFavourite}\n              libraryListName={favepisodes}\n            />\n          </HeartWrap>\n          <EpisodeCardInfo episode={episode} />\n          <Img src={image} alt={name} width=\"450\" height=\"200\" />\n        </Wrap>\n      )}\n    </>\n  );\n};\n","import styled from '@emotion/styled';\nimport { desktop, tablet } from 'shared/constants/deviceSizes';\n\nexport const List = styled.ul`\n  padding-bottom: 20px;\n  margin: 0 auto;\n\n  display: flex;\n  flex-wrap: wrap;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  gap: 16px;\n\n  @media screen and (min-width: ${tablet}) {\n    padding-top: 20px;\n    padding-bottom: 40px;\n    gap: 20px;\n  }\n`;\n\nexport const Item = styled.li`\n  flex-basis: 100%;\n\n  @media screen and (min-width: ${desktop}) {\n    flex-basis: calc((100% - 20px) / 2);\n  }\n`;\n","import { useEpisodes } from 'hooks/useEpisodes';\nimport { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSearchParams } from 'react-router-dom';\nimport { getEpisodesByFilter } from 'redux/episodes/thunks';\nimport { getSearchValues } from 'shared/utils/getSearchValues';\nimport { Item, List } from './EpisodeCardList.styled';\nimport { EpisodeCard } from '../EpisodeCard/EpisodeCard';\nimport { Loader } from 'shared/components/Loader';\nimport { Pagination } from 'shared/components/Pagination';\nimport { Error } from 'shared/components/Error';\nimport { notfound, oops } from 'shared/constants/errorText';\n\nexport const PARAMS_ARR = ['name', 'episode'];\n\nexport const EpisodeCardList = () => {\n  const [showList, setShowList] = useState(false);\n  const [searchParams] = useSearchParams();\n  const { info, episodes, error, isLoading } = useEpisodes();\n  const [page, setPage] = useState(1);\n  const dispatchFunc = useDispatch();\n\n  useEffect(() => {\n    setPage(1);\n  }, [searchParams]);\n\n  useEffect(() => {\n    const getInfo = async () => {\n      await dispatchFunc(\n        getEpisodesByFilter({\n          page,\n          ...getSearchValues(PARAMS_ARR, searchParams),\n        })\n      ).unwrap();\n      setShowList(true);\n    };\n\n    getInfo();\n  }, [dispatchFunc, page, searchParams]);\n\n  const shouldRenderList = episodes.length > 0 && !error && showList;\n  const shouldShowError = !isLoading && error && error.status !== 404;\n  const shouldShowNotFoundError = !isLoading && error && error.status === 404;\n  const shouldRenderPagination =\n    !error && episodes.length > 0 && info?.pages > 1;\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {shouldRenderList && (\n        <List>\n          {episodes.map(episode => (\n            <Item key={episode.id}>\n              <EpisodeCard episode={episode} />\n            </Item>\n          ))}\n        </List>\n      )}\n      {shouldRenderPagination && (\n        <Pagination\n          totalPages={info.pages}\n          onPageChange={setPage}\n          page={page}\n        />\n      )}\n      {shouldShowError && <Error text={oops} />}\n      {shouldShowNotFoundError && <Error text={notfound} />}\n    </>\n  );\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\nimport { desktop, tablet } from 'shared/constants/deviceSizes';\nimport { CardWrap } from 'shared/styles/components/CardDecoration.styled';\n\nexport const Wrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n\n  @media screen and (min-width: ${desktop}) {\n    flex-direction: row;\n    justify-content: space-around;\n  }\n`;\n\nexport const EpisodeWrap = styled(CardWrap)`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: end;\n\n  @media screen and (min-width: ${tablet}) {\n    justify-content: center;\n  }\n\n  &::before {\n    top: -5px;\n    left: 13px;\n  }\n\n  &::after {\n    bottom: -5px;\n    right: 13px;\n  }\n`;\n\nexport const StyledLink = styled(Link)`\n  display: block;\n  height: 100%;\n  color: inherit;\n\n  & ul.random-episode {\n    position: absolute;\n    top: 148px;\n    left: 4px;\n\n    @media screen and (min-width: ${tablet}) {\n      top: 70px;\n      left: -134px;\n    }\n  }\n`;\n\nexport const Randomizer = styled.div`\n  align-self: center;\n\n  @media screen and (min-width: ${desktop}) {\n    width: 300px;\n    display: flex;\n    flex-direction: column;\n    gap: 30px;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getEpisodeById } from 'redux/episode/thunks';\nimport { getRandomIndex } from 'shared/utils/getRandomIndex';\nimport { RandomButton } from 'shared/components/RandomButton';\nimport { images } from 'modules/Episodes/api.img/api.img';\nimport { useOneEpisode } from 'hooks/useOneEpisode';\nimport { useLocation } from 'react-router';\nimport { useEpisodes } from 'hooks/useEpisodes';\nimport { getRandomId } from 'shared/utils/getRandomId';\nimport { Episode } from '../Episode/Episode';\nimport { episodes } from 'shared/constants/routes';\nimport { RickForRandomizer } from 'shared/components/RickForRandomizer';\nimport { desktop } from 'shared/constants/deviceSizes';\nimport {\n  EpisodeWrap,\n  Randomizer,\n  StyledLink,\n  Wrap,\n} from './RandomEpisode.styled';\nimport { addToLibrary } from 'redux/library/slice';\nimport { randomepisodes } from 'shared/constants/libaryListName';\nimport { CardDecoration } from 'shared/styles/components/CardDecoration.styled';\nimport randomSound from 'shared/audio/teleport-sound-6.mp3'\n\nconst FIRST_EPISODE_ID = 1;\n\nexport const RandomEpisode = () => {\n  const location = useLocation();\n  const { info } = useEpisodes();\n  const { episode, isLoading, error } = useOneEpisode();\n  const [id, setId] = useState(episode?.id ?? FIRST_EPISODE_ID);\n  const [image, setImage] = useState(images[0]);\n  const dispatchFunc = useDispatch();\n\n  useEffect(() => {\n    dispatchFunc(getEpisodeById(id));\n    dispatchFunc(addToLibrary({ libraryListName: randomepisodes, id }));\n  }, [dispatchFunc, id]);\n\n  const handleRandomEpisode = () => {\n    const audio = new Audio(randomSound);\n    audio.play();\n\n    const randomId = getRandomId({ max: info.count });\n    setId(randomId);\n    const randomIndex = getRandomIndex(images.length);\n    setImage(images[randomIndex]);\n  };\n\n  const shouldShowEpisode = episode !== null && !error;\n\n  return (\n    <Wrap>\n      <CardDecoration>\n        <EpisodeWrap>\n          <StyledLink to={`/${episodes}/${id}`} state={{ from: location }}>\n            {shouldShowEpisode && <Episode image={image} />}\n          </StyledLink>\n        </EpisodeWrap>\n      </CardDecoration>\n      <Randomizer>\n        <RickForRandomizer showOnDeviceWidth={desktop} />\n        <RandomButton onClick={handleRandomEpisode} isLoading={isLoading}>\n          Random Episode\n        </RandomButton>\n      </Randomizer>\n    </Wrap>\n  );\n};\n","import styled from '@emotion/styled/macro';\n\nexport const Wrap = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  gap: 20px;\n\n  margin: 0 auto;\n`;\n\nexport const Selected = styled.select`\n  width: 210px;\n\n  outline: none;\n  border: 2px solid ${({ theme }) => theme.crossThemeAccent};\n  border-radius: 8px;\n  background-color: #fff;\n  color: #212121;\n  padding: 14px 10px 14px 10px;\n  text-align: center;\n`;\n\nexport const Option = styled.option`\n  font-style: normal;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 18px;\n  color: grey;\n`;\n","import { message, regex } from 'shared/constants/searchInput';\nimport * as Yup from 'yup';\n\nexport const schema = Yup.object({\n  name: Yup.string().matches(regex, {\n    message: message,\n    excludeEmptyString: true,\n  }),\n});\n","import { nanoid } from '@reduxjs/toolkit';\n\nexport const searchInput = {\n  id: nanoid(),\n  inputName: 'name',\n};\n\nexport const selectInput = {\n  id: nanoid(),\n  inputName: 'episode',\n  options: [\n    { option: 'All seasons', value: '' },\n    { option: 'Season 1', value: 'S01' },\n    { option: 'Season 2', value: 'S02' },\n    { option: 'Season 3', value: 'S03' },\n    { option: 'Season 4', value: 'S04' },\n    { option: 'Season 5', value: 'S05' },\n  ],\n};\n\nexport const inputs = [searchInput.inputName, selectInput.inputName];\n","import { Wrap, Selected, Option } from './SearchEpisodes.styled';\nimport { useSearchParams } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { schema } from './schema';\nimport debounce from 'lodash.debounce';\nimport { SearchInput } from 'shared/components/SearchInput';\nimport { getSearchValues } from 'shared/utils/getSearchValues';\nimport { inputs, searchInput, selectInput } from './inputs';\nimport { getCleanValues } from 'shared/utils/getCleanValues';\n\nconst DELAY = 500;\n\nexport const SearchEpisodes = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const {\n    register,\n    formState: { errors },\n  } = useForm({\n    defaultValues: getSearchValues(inputs, searchParams),\n    resolver: yupResolver(schema),\n    mode: 'onChange',\n  });\n\n  const handleSearch = debounce(async ({ target }) => {\n    if (target.value.trim() === '') {\n      searchParams.delete(target.name);\n      setSearchParams(searchParams);\n      return;\n    }\n    if (errors[target.name]) return;\n    setSearchParams({\n      ...getCleanValues(getSearchValues(inputs, searchParams)),\n      [target.name]: target.value,\n    });\n  }, DELAY);\n\n  return (\n    <Wrap>\n      <Selected\n        {...register(selectInput.inputName)}\n        onChange={handleSearch}\n        defaultValue=\"\"\n      >\n        {selectInput.options.map(({ option, value }) => (\n          <Option key={option} value={value}>\n            {option}\n          </Option>\n        ))}\n      </Selected>\n      <SearchInput\n        id={searchInput.id}\n        inputName={searchInput.inputName}\n        register={register}\n        errors={errors}\n        onChange={handleSearch}\n        placeholder=\"Filter by name...\"\n      />\n    </Wrap>\n  );\n};\n","import { Container } from 'shared/styles/components/Container.styled';\nimport { Section } from 'shared/styles/components/Section.styled';\nimport { StyledH1 } from './Episodes.styled';\nimport { RandomEpisode } from './components/RandomEpisode/RandomEpisode';\nimport { SearchEpisodes } from './components/SearchEpisodes/SearchEpisodes';\nimport { EpisodeCardList } from './components/EpisodeCardList/EpisodeCardList';\n\nexport const Episodes = () => {\n  return (\n    <>\n      <Section>\n        <Container>\n          <StyledH1>Episodes</StyledH1>\n          <RandomEpisode />\n        </Container>\n      </Section>\n      <Section>\n        <Container>\n          <SearchEpisodes />\n        </Container>\n      </Section>\n      <Section>\n        <Container>\n          <EpisodeCardList />\n        </Container>\n      </Section>\n    </>\n  );\n};\n","import { Helmet } from 'react-helmet-async';\nimport { Episodes } from 'modules/Episodes';\n\nconst EpisodesPage = () => {\n  return (\n    <>\n      <Helmet>\n        <title>Episodes</title>\n      </Helmet>\n      <Episodes />\n    </>\n  );\n};\n\nexport default EpisodesPage;\n","import styled from '@emotion/styled';\n\nconst getDeviceWidth = ({ showOnDeviceWidth }) => showOnDeviceWidth;\n\nexport const Wrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 40px;\n\n  @media screen and (max-width: ${getDeviceWidth}) {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    margin: -1px;\n    border: 0;\n    padding: 0;\n\n    white-space: nowrap;\n    clip-path: inset(100%);\n    clip: rect(0 0 0 0);\n    overflow: hidden;\n  }\n`;\n\nexport const SvgRick = styled.svg``;\n\nexport const RicksText = styled.p`\n  font-size: 24px;\n  text-align: center;\n`;\n","import sprite from 'shared/icons/sprite.svg';\nimport { useLocation } from 'react-router';\nimport { characters, episodes, locations } from 'shared/constants/routes';\nimport { RicksText, SvgRick, Wrap } from './RickForRandomizer.styled';\n\nexport const RickForRandomizer = ({ showOnDeviceWidth }) => {\n  const location = useLocation();\n\n  const getText = location => {\n    switch (location.pathname) {\n      case `/${characters}`:\n        return 'character';\n      case `/${episodes}`:\n        return 'episode';\n      case `/${locations}`:\n        return 'location';\n      default:\n        return 'data';\n    }\n  };\n\n  return (\n    <Wrap showOnDeviceWidth={showOnDeviceWidth}>\n      <SvgRick width=\"100\" height=\"100\">\n        <use href={`${sprite}#icons8-rick-sanchez`} />\n      </SvgRick>\n      <RicksText>\n        Yeah, just get a random {getText(location)} ...whatever\n      </RicksText>\n    </Wrap>\n  );\n};\n","export const getRandomId = ({ max }) => Math.floor(Math.random() * max) + 1;\n"],"names":["selectEpisodeIsLoading","state","episode","isLoading","selectEpisodeError","error","selectEpisodeWithIsFav","createSelector","item","selectFavEpisodesIds","addIsFavouriteToItem","useOneEpisode","useSelector","shine","keyframes","Wrap","styled","theme","cubic","bgEpisodesTransparent","tablet","crossThemeAccent","LoaderWrap","desktop","Img","StyledNumber","Number","textPrimary","characterCardTextAccent","HeartWrap","getHeartColor","Episode","image","id","isFavourite","name","CardLoader","Heart","libraryListName","favepisodes","EpisodeCardInfo","src","alt","width","height","List","Item","PARAMS_ARR","EpisodeCardList","useState","showList","setShowList","useSearchParams","searchParams","useEpisodes","info","episodes","page","setPage","dispatchFunc","useDispatch","useEffect","getInfo","getEpisodesByFilter","getSearchValues","unwrap","shouldRenderList","length","shouldShowError","status","shouldShowNotFoundError","shouldRenderPagination","pages","Loader","map","EpisodeCard","Pagination","totalPages","onPageChange","Error","text","oops","notfound","EpisodeWrap","CardWrap","StyledLink","Link","Randomizer","RandomEpisode","location","useLocation","setId","images","setImage","getEpisodeById","addToLibrary","randomepisodes","shouldShowEpisode","to","from","RickForRandomizer","showOnDeviceWidth","RandomButton","onClick","Audio","randomSound","play","randomId","getRandomId","max","count","randomIndex","getRandomIndex","Selected","Option","schema","Yup","matches","regex","message","excludeEmptyString","searchInput","nanoid","inputName","selectInput","options","option","value","inputs","SearchEpisodes","setSearchParams","useForm","defaultValues","resolver","yupResolver","mode","register","errors","formState","handleSearch","debounce","target","trim","delete","getCleanValues","onChange","defaultValue","SearchInput","placeholder","Episodes","SvgRick","RicksText","href","sprite","pathname","characters","locations","getText","Math","floor","random"],"sourceRoot":""}